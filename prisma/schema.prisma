generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String?
  image           String?
  role            Role             @default(USER)
  phone           String?
  dateOfBirth     DateTime?
  isPregnant      Boolean          @default(false)
  pregnancyDate   DateTime?
  hasChild        Boolean          @default(false)
  childBirthDate  DateTime?
  childGender     String?
  isMenstruating  Boolean          @default(false)
  cycleDays       Int              @default(28)
  lastPeriodDate  DateTime?
  periodEndDate   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  password        String
  certificates    Certificate[]
  enrollments     Enrollment[]
  menstrualCycles MenstrualCycle[]
  messages        Message[]        @relation("UserMessages")
  sessions        Session[]        @relation("UserSessions")
  events          Event[]          @relation("Attendees")
}

model Expert {
  id               Int       @id @default(autoincrement())
  name             String
  image            String?
  email            String    @unique
  phone            String
  password         String
  fieldOfExpertise String
  role             Role      @default(EXPERT)
  bio              String?
  rating           Float     @default(0)
  isVerified       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  courses          Course[]
  events           Event[]   @relation("ExpertEvents")
  sessions         Session[] @relation("ExpertSessions")
}

model Partner {
  id          Int       @id @default(autoincrement())
  name        String
  image       String?
  email       String    @unique
  phone       String
  description String?
  website     String?
  role        Role      @default(PARTNER)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  password    String
  courses     Course[]  @relation("PartnerCourses")
  events      Event[]   @relation("PartnerEvents")
  sessions    Session[] @relation("PartnerSessions")
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  image       String?
  email       String    @unique
  phone       String
  description String?
  website     String?
  role        Role      @default(ORGANIZATION)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  password    String
  courses     Course[]  @relation("OrganizationCourses")
  events      Event[]   @relation("OrganizationEvents")
  sessions    Session[] @relation("OrganizationSessions")
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  date           DateTime
  location       String
  maxAttendees   Int?
  expertId       Int?
  partnerId      Int?
  organizationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expert         Expert?       @relation("ExpertEvents", fields: [expertId], references: [id])
  organization   Organization? @relation("OrganizationEvents", fields: [organizationId], references: [id])
  partner        Partner?      @relation("PartnerEvents", fields: [partnerId], references: [id])
  attendees      User[]        @relation("Attendees")
}

model Course {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  category       String
  expertId       Int?
  partnerId      Int?
  organizationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expert         Expert?       @relation(fields: [expertId], references: [id])
  organization   Organization? @relation("OrganizationCourses", fields: [organizationId], references: [id])
  partner        Partner?      @relation("PartnerCourses", fields: [partnerId], references: [id])
  enrollments    Enrollment[]
  modules        Module[]
}

model Module {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  videoUrl  String?
  order     Int
  courseId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    Course     @relation(fields: [courseId], references: [id])
  progress  Progress[]
}

model Enrollment {
  id          Int          @id @default(autoincrement())
  userId      Int
  courseId    Int
  status      String       @default("in_progress")
  progress    Int          @default(0)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  certificate Certificate?
  course      Course       @relation(fields: [courseId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    Int
  moduleId  Int
  completed Boolean  @default(false)
  score     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id])
}

model Certificate {
  id           Int        @id @default(autoincrement())
  userId       Int
  enrollmentId Int        @unique
  issueDate    DateTime   @default(now())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Session {
  id             Int       @id @default(autoincrement())
  userId         Int
  expertId       Int?
  partnerId      Int?
  organizationId Int?
  startTime      DateTime
  endTime        DateTime?
  status         String    @default("scheduled")
  type           String
  notes          String?
  rating         Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[] @relation("SessionMessages")
  expert         Expert?   @relation("ExpertSessions", fields: [expertId], references: [id])
  user           User      @relation("UserSessions", fields: [userId], references: [id])

  Partner Partner? @relation("PartnerSessions", fields: [partnerId], references: [id])

  Organization Organization? @relation("OrganizationSessions", fields: [organizationId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  sessionId Int?
  status    String   @default("sent")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  session   Session? @relation("SessionMessages", fields: [sessionId], references: [id])
}

model MenstrualCycle {
  id              Int       @id @default(autoincrement())
  userId          Int
  startDate       DateTime
  expectedEndDate DateTime
  actualEndDate   DateTime?
  symptoms        String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  EXPERT
  PARTNER
  ORGANIZATION
}
