// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Only use `prisma-client-py` generator when not in Vercel's environment
// generator python {
//   provider = "prisma-client-py"
//   binaryTargets = ["native"]
//   enabled = env("USE_PRISMA_PY") == "true"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String?
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  events          Event[]
  enrollments     Enrollment[]
  menstrualCycles MenstrualCycle[]
  messages        Message[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attendees   User[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  category    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  modules     Module[]
  enrollments Enrollment[]
}

model Module {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  order     Int
  courseId  Int
  course    Course     @relation(fields: [courseId], references: [id])
  progress  Progress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  status    String   @default("in_progress")
  progress  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    Int
  moduleId  Int
  completed Boolean  @default(false)
  score     Int?
  module    Module   @relation(fields: [moduleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenstrualCycle {
  id              Int      @id @default(autoincrement())
  userId          Int
  startDate       DateTime
  expectedEndDate DateTime
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  status     String   @default("sent")
  sender     User     @relation(fields: [senderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  name       String
  occupation String
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
